version: '3.8'
services:
  api:
    container_name: orderService.api
    build:
      context: .
    restart: on-failure
    expose:
      - "8000"
    ports:
      - "8000:8000"
    command: [ "main" ]
    environment:
      - CONFIG_PATH=${CONFIG_PATH:-./usr/local/bin/prod.toml}
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - orderService.api.network
      - orderService.postgres.network
      - orderService.redis.network
      - orderService.rabbitmq.network
    healthcheck:
      test: [ "CMD-SHELL", "curl -fsSL http://localhost:8000/healthcheck/" ]
      interval: 10s
      timeout: 60s
      retries: 5
      start_period: 10s

  postgres:
    container_name: orderService.postgres
    image: postgres:latest
    restart: on-failure
    expose:
      - "5432"
    ports:
      - "127.0.0.1:15432:5432"
    networks:
      - orderService.postgres.network
    env_file:
      - .env
    volumes:
      - orderService.postgres.data:/var/lib/postgresql/users:rw
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      interval: 10s
      timeout: 60s
      retries: 5
      start_period: 10s

  rabbitmq:
    image: rabbitmq:3.11-management
    container_name: orderService.rabbitmq
    hostname: orderService.rabbitmq
    networks:
      - orderService.rabbitmq.network
    expose:
      - "5672"
      - "15672"
    volumes:
      - orderService.rabbitmq.data:/var/lib/rabbitmq/:rw
    ports:
      - "127.0.0.1:5672:5672"
      - "127.0.0.1:15672:15672"
    env_file:
      .env.dev
    healthcheck:
      test: [ "CMD-SHELL", "rabbitmq-diagnostics check_running -q" ]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 10s

  redis:
    container_name: orderService.redis
    image: redis:alpine
    command: redis-server
    networks:
      - orderService.redis.network
      - orderService.grafana.network
    expose:
      - "6379"
    ports:
      - "6379:6379"
    volumes:
      - orderService.redis.data:/data
    healthcheck:
      test: [ "CMD", "redis-cli","ping" ]
      interval: 10s
      timeout: 60s
      retries: 5
      start_period: 10s
  grafana:
    image: grafana/grafana:9.5.2
    container_name: orderService.grafana
    hostname: orderService.grafana
    restart: unless-stopped
    expose:
      - "3000"
    ports:
      - "127.0.0.1:3000:3000"
    networks:
      - orderService.grafana.network
    volumes:
      - orderService.grafana.data:/var/lib/grafana:rw
      - ./grafana/provisioning:/etc/grafana/provisioning:rw
    env_file:
      - .env
    environment:
      - GF_USERS_ALLOW_SIGN_UP=false
      - VIRTUAL_HOST=orderService.grafana
      - NETWORK_ACCESS=internal
      - VIRTUAL_PORT=3000
  loki:
    image: grafana/loki:2.8.2
    container_name: orderService.loki
    hostname: orderService.loki
    expose:
      - "3100"
    volumes:
      - ./loki/config.yaml:/etc/loki/config.yaml:ro
      - orderService.loki.data:/tmp/:rw
    command: -config.file=/etc/loki/config.yaml
    restart: unless-stopped
    networks:
      - orderService.grafana.network
  vector:
    image: timberio/vector:0.29.1-alpine
    container_name: orderService.vector
    hostname: orderService.vector
    restart: unless-stopped
    expose:
      - "8383"
    networks:
      - orderService.grafana.network
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./vector/vector.toml:/etc/vector/vector.toml:ro
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
  prometheus:
    container_name: orderService.prometheus
    image: prom/prometheus:v2.36.2
    networks:
      - orderService.grafana.network
      - orderService.api.network
    volumes:
      - ./prometheus:/etc/prometheus:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yaml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"

volumes:
  orderService.postgres.data: { }
  orderService.rabbitmq.data: { }
  orderService.redis.data: { }
  orderService.grafana.data: { }
  orderService.loki.data: { }

networks:
  orderService.postgres.network: { }
  orderService.api.network: { }
  orderService.rabbitmq.network: { }
  orderService.redis.network: { }
  orderService.grafana.network: { }